{
  "address": "0xdc64a140aa3e981100a9beca4e685f962f0cf6c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "contractName": "MyMockV3Aggregator",
  "sourceName": "contracts/mocks/MockV3Aggregator.sol",
  "bytecode": "0x608060405234801561000f575f5ffd5b50604051610a46380380610a4683398181016040528101906100319190610141565b8181815f5f6101000a81548160ff021916908360ff16021790555061005b8161006460201b60201c565b505050506101fc565b806001819055504260028190555060035f815480929190610084906101b5565b91905055508060045f60035481526020019081526020015f20819055504260055f60035481526020019081526020015f20819055504260065f60035481526020019081526020015f208190555050565b5f5ffd5b5f60ff82169050919050565b6100ed816100d8565b81146100f7575f5ffd5b50565b5f81519050610108816100e4565b92915050565b5f819050919050565b6101208161010e565b811461012a575f5ffd5b50565b5f8151905061013b81610117565b92915050565b5f5f60408385031215610157576101566100d4565b5b5f610164858286016100fa565b92505060206101758582860161012d565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f819050919050565b5f6101bf826101ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036101f1576101f061017f565b5b600182019050919050565b61083d806102095f395ff3fe608060405234801561000f575f5ffd5b50600436106100b2575f3560e01c80638205bf6a1161006f5780638205bf6a146101685780639a6fc8f514610186578063a87a20ce146101ba578063b5ab58dc146101d6578063b633620c14610206578063feaf968c14610236576100b2565b8063313ce567146100b65780634aa2011f146100d457806350d25bcd146100f057806354fd4d501461010e578063668a0f021461012c5780637284e4161461014a575b5f5ffd5b6100be610258565b6040516100cb91906104ac565b60405180910390f35b6100ee60048036038101906100e9919061056e565b610269565b005b6100f86102d8565b60405161010591906105e1565b60405180910390f35b6101166102de565b6040516101239190610609565b60405180910390f35b6101346102e2565b6040516101419190610609565b60405180910390f35b6101526102e8565b60405161015f9190610692565b60405180910390f35b610170610325565b60405161017d9190610609565b60405180910390f35b6101a0600480360381019061019b91906106b2565b61032b565b6040516101b19594939291906106ec565b60405180910390f35b6101d460048036038101906101cf919061073d565b61039f565b005b6101f060048036038101906101eb9190610768565b61040f565b6040516101fd91906105e1565b60405180910390f35b610220600480360381019061021b9190610768565b610424565b60405161022d9190610609565b60405180910390f35b61023e610439565b60405161024f9594939291906106ec565b60405180910390f35b5f5f9054906101000a900460ff1681565b8369ffffffffffffffffffff1660038190555082600181905550816002819055508260045f60035481526020019081526020015f20819055508160055f60035481526020019081526020015f20819055508060065f60035481526020019081526020015f208190555050505050565b60015481565b5f81565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b5f5f5f5f5f8560045f8869ffffffffffffffffffff1681526020019081526020015f205460065f8969ffffffffffffffffffff1681526020019081526020015f205460055f8a69ffffffffffffffffffff1681526020019081526020015f2054899450945094509450945091939590929450565b806001819055504260028190555060035f8154809291906103bf906107c0565b91905055508060045f60035481526020019081526020015f20819055504260055f60035481526020019081526020015f20819055504260065f60035481526020019081526020015f208190555050565b6004602052805f5260405f205f915090505481565b6005602052805f5260405f205f915090505481565b5f5f5f5f5f60035460045f60035481526020019081526020015f205460065f60035481526020019081526020015f205460055f60035481526020019081526020015f2054600354945094509450945094509091929394565b5f60ff82169050919050565b6104a681610491565b82525050565b5f6020820190506104bf5f83018461049d565b92915050565b5f5ffd5b5f69ffffffffffffffffffff82169050919050565b6104e7816104c9565b81146104f1575f5ffd5b50565b5f81359050610502816104de565b92915050565b5f819050919050565b61051a81610508565b8114610524575f5ffd5b50565b5f8135905061053581610511565b92915050565b5f819050919050565b61054d8161053b565b8114610557575f5ffd5b50565b5f8135905061056881610544565b92915050565b5f5f5f5f60808587031215610586576105856104c5565b5b5f610593878288016104f4565b94505060206105a487828801610527565b93505060406105b58782880161055a565b92505060606105c68782880161055a565b91505092959194509250565b6105db81610508565b82525050565b5f6020820190506105f45f8301846105d2565b92915050565b6106038161053b565b82525050565b5f60208201905061061c5f8301846105fa565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61066482610622565b61066e818561062c565b935061067e81856020860161063c565b6106878161064a565b840191505092915050565b5f6020820190508181035f8301526106aa818461065a565b905092915050565b5f602082840312156106c7576106c66104c5565b5b5f6106d4848285016104f4565b91505092915050565b6106e6816104c9565b82525050565b5f60a0820190506106ff5f8301886106dd565b61070c60208301876105d2565b61071960408301866105fa565b61072660608301856105fa565b61073360808301846106dd565b9695505050505050565b5f60208284031215610752576107516104c5565b5b5f61075f84828501610527565b91505092915050565b5f6020828403121561077d5761077c6104c5565b5b5f61078a8482850161055a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6107ca8261053b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036107fc576107fb610793565b5b60018201905091905056fea264697066735822122000e0b881af7a128c3d973ee4c185b63460ac33d7e43b06cd0b6c07500cb24f6a64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b50600436106100b2575f3560e01c80638205bf6a1161006f5780638205bf6a146101685780639a6fc8f514610186578063a87a20ce146101ba578063b5ab58dc146101d6578063b633620c14610206578063feaf968c14610236576100b2565b8063313ce567146100b65780634aa2011f146100d457806350d25bcd146100f057806354fd4d501461010e578063668a0f021461012c5780637284e4161461014a575b5f5ffd5b6100be610258565b6040516100cb91906104ac565b60405180910390f35b6100ee60048036038101906100e9919061056e565b610269565b005b6100f86102d8565b60405161010591906105e1565b60405180910390f35b6101166102de565b6040516101239190610609565b60405180910390f35b6101346102e2565b6040516101419190610609565b60405180910390f35b6101526102e8565b60405161015f9190610692565b60405180910390f35b610170610325565b60405161017d9190610609565b60405180910390f35b6101a0600480360381019061019b91906106b2565b61032b565b6040516101b19594939291906106ec565b60405180910390f35b6101d460048036038101906101cf919061073d565b61039f565b005b6101f060048036038101906101eb9190610768565b61040f565b6040516101fd91906105e1565b60405180910390f35b610220600480360381019061021b9190610768565b610424565b60405161022d9190610609565b60405180910390f35b61023e610439565b60405161024f9594939291906106ec565b60405180910390f35b5f5f9054906101000a900460ff1681565b8369ffffffffffffffffffff1660038190555082600181905550816002819055508260045f60035481526020019081526020015f20819055508160055f60035481526020019081526020015f20819055508060065f60035481526020019081526020015f208190555050505050565b60015481565b5f81565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b5f5f5f5f5f8560045f8869ffffffffffffffffffff1681526020019081526020015f205460065f8969ffffffffffffffffffff1681526020019081526020015f205460055f8a69ffffffffffffffffffff1681526020019081526020015f2054899450945094509450945091939590929450565b806001819055504260028190555060035f8154809291906103bf906107c0565b91905055508060045f60035481526020019081526020015f20819055504260055f60035481526020019081526020015f20819055504260065f60035481526020019081526020015f208190555050565b6004602052805f5260405f205f915090505481565b6005602052805f5260405f205f915090505481565b5f5f5f5f5f60035460045f60035481526020019081526020015f205460065f60035481526020019081526020015f205460055f60035481526020019081526020015f2054600354945094509450945094509091929394565b5f60ff82169050919050565b6104a681610491565b82525050565b5f6020820190506104bf5f83018461049d565b92915050565b5f5ffd5b5f69ffffffffffffffffffff82169050919050565b6104e7816104c9565b81146104f1575f5ffd5b50565b5f81359050610502816104de565b92915050565b5f819050919050565b61051a81610508565b8114610524575f5ffd5b50565b5f8135905061053581610511565b92915050565b5f819050919050565b61054d8161053b565b8114610557575f5ffd5b50565b5f8135905061056881610544565b92915050565b5f5f5f5f60808587031215610586576105856104c5565b5b5f610593878288016104f4565b94505060206105a487828801610527565b93505060406105b58782880161055a565b92505060606105c68782880161055a565b91505092959194509250565b6105db81610508565b82525050565b5f6020820190506105f45f8301846105d2565b92915050565b6106038161053b565b82525050565b5f60208201905061061c5f8301846105fa565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61066482610622565b61066e818561062c565b935061067e81856020860161063c565b6106878161064a565b840191505092915050565b5f6020820190508181035f8301526106aa818461065a565b905092915050565b5f602082840312156106c7576106c66104c5565b5b5f6106d4848285016104f4565b91505092915050565b6106e6816104c9565b82525050565b5f60a0820190506106ff5f8301886106dd565b61070c60208301876105d2565b61071960408301866105fa565b61072660608301856105fa565b61073360808301846106dd565b9695505050505050565b5f60208284031215610752576107516104c5565b5b5f61075f84828501610527565b91505092915050565b5f6020828403121561077d5761077c6104c5565b5b5f61078a8482850161055a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6107ca8261053b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036107fc576107fb610793565b5b60018201905091905056fea264697066735822122000e0b881af7a128c3d973ee4c185b63460ac33d7e43b06cd0b6c07500cb24f6a64736f6c634300081c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/mocks/MockV3Aggregator.sol",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "421800",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "decimals()": "2466",
        "description()": "infinite",
        "getAnswer(uint256)": "2820",
        "getRoundData(uint80)": "infinite",
        "getTimestamp(uint256)": "infinite",
        "latestAnswer()": "2470",
        "latestRound()": "2514",
        "latestRoundData()": "infinite",
        "latestTimestamp()": "2425",
        "updateAnswer(int256)": "141894",
        "updateRoundData(uint80,int256,uint256,uint256)": "infinite",
        "version()": "391"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/mocks/MockV3Aggregator.sol\":\"MyMockV3Aggregator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\"project/:@chainlink/contracts/=npm/@chainlink/contracts@1.4.0/\"]},\"sources\":{\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x2450923d9bc223f53bcbbd50a17405929ce5322200e8ce053c7918030cbb7844\",\"license\":\"MIT\"},\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xd5e222c5dd223490b766da8e45266101dd3635b1ba31d9b7a3a80d49f7640f85\",\"license\":\"MIT\"},\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/mocks/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorV2V3Interface} from \\\"../interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\n// solhint-disable\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\n  uint256 public constant override version = 0;\\n\\n  uint8 public override decimals;\\n  int256 public override latestAnswer;\\n  uint256 public override latestTimestamp;\\n  uint256 public override latestRound;\\n\\n  mapping(uint256 => int256) public override getAnswer;\\n  mapping(uint256 => uint256) public override getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure override returns (string memory) {\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x27a9502fd9c7decd2d3213653050e29bdfa2f5e71f2a83d4c98120de4b9c711f\",\"license\":\"MIT\"},\"project/contracts/mocks/MockV3Aggregator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// mock\\u5408\\u7ea6\\uff0c\\n// FundMe\\u5408\\u7ea6\\u4e2d\\u7528\\u5230\\u4e86dataFeed\\u5408\\u7ea6\\uff0c\\u9700\\u8981\\u5728\\u6d4b\\u8bd5\\u7684\\u65f6\\u5019\\u5fc5\\u987b\\u5728sepolia\\u4e2d\\u8fdb\\u884c\\u3002\\n// MockV3Aggregator  mock\\u5408\\u7ea6\\u5b9e\\u73b0\\u4e86dataFeed\\u5408\\u7ea6\\u7684\\u57fa\\u672c\\u529f\\u80fd\\uff0c\\u53ea\\u9700\\u8981\\u5728\\u672c\\u5730\\u90e8\\u7f72\\u5c31\\u53ef\\u4ee5\\uff0c\\u4e0d\\u9700\\u8981\\u518dsepolia\\u4e2d\\u8fdb\\u884c\\u3002\\n// \\u8fd9\\u4e2amock\\u5408\\u7ea6\\u9700\\u8981\\u4e24\\u4e2a\\u53c2\\u6570\\n// decimals\\uff1amock\\u5408\\u7ea6\\u63d0\\u4f9b\\u7684\\u4ef7\\u683c\\u6570\\u636e\\uff0c\\u540e\\u9762\\u6709\\u51e0\\u4e2a0\\u3002\\u8bbe\\u4e3a8\\n// initialAnswer\\uff1a\\u8fd4\\u56de\\u4ef7\\u683c\\uff0c\\u771f\\u6b63\\u7684\\u9884\\u8a00\\u673a\\u5408\\u7ea6\\u5e94\\u8be5\\u662f\\u4ece\\u5916\\u90e8\\u83b7\\u53d6\\u7684\\uff0c\\u8fd9\\u4e2amock\\u5408\\u7ea6\\u662f\\u81ea\\u5df1\\u8bbe\\u5b9a\\u7684\\u3002300000000000\\uff083000\\u540e\\u97628\\u4e2a\\u96f6\\uff09\\npragma solidity ^0.8.20;\\n\\nimport {MockV3Aggregator} from \\\"@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol\\\";\\n\\ncontract MyMockV3Aggregator is MockV3Aggregator {\\n    constructor(\\n        uint8 _decimals,\\n        int256 _initialAnswer\\n    ) MockV3Aggregator(_decimals, _initialAnswer) {}\\n}\\n\",\"keccak256\":\"0x5aa45c98fabf2cb68c5f57b7202381fc248c0e638302dd2f66dda681f5a58b24\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 118,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 121,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 124,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 137,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 141,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "argsData": "0x000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000045d964b800",
  "transaction": {
    "hash": "0x1f495774abf8b83cc355e3bd8797e8663fee75d0e24544ff07c845d91db7f349",
    "nonce": "0x4",
    "origin": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
  },
  "receipt": {
    "blockHash": "0x3e38143370315ad9cc131e29d16c61bd8aeca98be900f52c581d5d2d2defd0d2",
    "blockNumber": "0x5",
    "transactionIndex": "0x0"
  }
}