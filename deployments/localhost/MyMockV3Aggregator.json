{
  "address": "0x5fbdb2315678afecb367f032d93f642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "contractName": "MyMockV3Aggregator",
  "sourceName": "contracts/mocks/MockV3Aggregator.sol",
  "bytecode": "0x608060405234801561000f575f5ffd5b5060405161050f38038061050f83398101604081905261002e916100a4565b5f805460ff191660ff8416179055818161004781610050565b505050506100f9565b60018190554260025560038054905f610068836100d5565b9091555050600380545f908152600460209081526040808320949094558254825260058152838220429081905592548252600690529190912055565b5f5f604083850312156100b5575f5ffd5b825160ff811681146100c5575f5ffd5b6020939093015192949293505050565b5f600182016100f257634e487b7160e01b5f52601160045260245ffd5b5060010190565b610409806101065f395ff3fe608060405234801561000f575f5ffd5b50600436106100b1575f3560e01c80638205bf6a1161006e5780638205bf6a1461019a5780639a6fc8f5146101a3578063a87a20ce14610220578063b5ab58dc14610233578063b633620c14610252578063feaf968c14610271575f5ffd5b8063313ce567146100b55780634aa2011f146100d857806350d25bcd1461013457806354fd4d501461014b578063668a0f02146101525780637284e4161461015b575b5f5ffd5b5f546100c19060ff1681565b60405160ff90911681526020015b60405180910390f35b6101326100e636600461030d565b69ffffffffffffffffffff9093166003818155600184905560028390555f9182526004602090815260408084209590955581548352600581528483209390935554815260069091522055565b005b61013d60015481565b6040519081526020016100cf565b61013d5f81565b61013d60035481565b604080518082018252601f81527f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00602082015290516100cf9190610343565b61013d60025481565b6101e96101b1366004610378565b69ffffffffffffffffffff81165f90815260046020908152604080832054600683528184205460059093529220549293919290918490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100cf565b61013261022e366004610398565b61029b565b61013d610241366004610398565b60046020525f908152604090205481565b61013d610260366004610398565b60056020525f908152604090205481565b6003545f8181526004602090815260408083205460068352818420546005909352922054836101e9565b60018190554260025560038054905f6102b3836103af565b9091555050600380545f908152600460209081526040808320949094558254825260058152838220429081905592548252600690529190912055565b803569ffffffffffffffffffff81168114610308575f5ffd5b919050565b5f5f5f5f60808587031215610320575f5ffd5b610329856102ef565b966020860135965060408601359560600135945092505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215610388575f5ffd5b610391826102ef565b9392505050565b5f602082840312156103a8575f5ffd5b5035919050565b5f600182016103cc57634e487b7160e01b5f52601160045260245ffd5b506001019056fea2646970667358221220e101512d174377aae20ec779e2e28080bd585df9fe85e5749043a167f49ade9964736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b50600436106100b1575f3560e01c80638205bf6a1161006e5780638205bf6a1461019a5780639a6fc8f5146101a3578063a87a20ce14610220578063b5ab58dc14610233578063b633620c14610252578063feaf968c14610271575f5ffd5b8063313ce567146100b55780634aa2011f146100d857806350d25bcd1461013457806354fd4d501461014b578063668a0f02146101525780637284e4161461015b575b5f5ffd5b5f546100c19060ff1681565b60405160ff90911681526020015b60405180910390f35b6101326100e636600461030d565b69ffffffffffffffffffff9093166003818155600184905560028390555f9182526004602090815260408084209590955581548352600581528483209390935554815260069091522055565b005b61013d60015481565b6040519081526020016100cf565b61013d5f81565b61013d60035481565b604080518082018252601f81527f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00602082015290516100cf9190610343565b61013d60025481565b6101e96101b1366004610378565b69ffffffffffffffffffff81165f90815260046020908152604080832054600683528184205460059093529220549293919290918490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100cf565b61013261022e366004610398565b61029b565b61013d610241366004610398565b60046020525f908152604090205481565b61013d610260366004610398565b60056020525f908152604090205481565b6003545f8181526004602090815260408083205460068352818420546005909352922054836101e9565b60018190554260025560038054905f6102b3836103af565b9091555050600380545f908152600460209081526040808320949094558254825260058152838220429081905592548252600690529190912055565b803569ffffffffffffffffffff81168114610308575f5ffd5b919050565b5f5f5f5f60808587031215610320575f5ffd5b610329856102ef565b966020860135965060408601359560600135945092505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215610388575f5ffd5b610391826102ef565b9392505050565b5f602082840312156103a8575f5ffd5b5035919050565b5f600182016103cc57634e487b7160e01b5f52601160045260245ffd5b506001019056fea2646970667358221220e101512d174377aae20ec779e2e28080bd585df9fe85e5749043a167f49ade9964736f6c634300081c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/mocks/MockV3Aggregator.sol",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "206600",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "decimals()": "2301",
        "description()": "infinite",
        "getAnswer(uint256)": "2501",
        "getRoundData(uint80)": "6975",
        "getTimestamp(uint256)": "2523",
        "latestAnswer()": "2339",
        "latestRound()": "2383",
        "latestRoundData()": "8991",
        "latestTimestamp()": "2294",
        "updateAnswer(int256)": "141599",
        "updateRoundData(uint80,int256,uint256,uint256)": "137411",
        "version()": "260"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/mocks/MockV3Aggregator.sol\":\"MyMockV3Aggregator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\"project/:@chainlink/contracts/=npm/@chainlink/contracts@1.4.0/\"]},\"sources\":{\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x2450923d9bc223f53bcbbd50a17405929ce5322200e8ce053c7918030cbb7844\",\"license\":\"MIT\"},\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xd5e222c5dd223490b766da8e45266101dd3635b1ba31d9b7a3a80d49f7640f85\",\"license\":\"MIT\"},\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"npm/@chainlink/contracts@1.4.0/src/v0.8/shared/mocks/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorV2V3Interface} from \\\"../interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\n// solhint-disable\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\n  uint256 public constant override version = 0;\\n\\n  uint8 public override decimals;\\n  int256 public override latestAnswer;\\n  uint256 public override latestTimestamp;\\n  uint256 public override latestRound;\\n\\n  mapping(uint256 => int256) public override getAnswer;\\n  mapping(uint256 => uint256) public override getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure override returns (string memory) {\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x27a9502fd9c7decd2d3213653050e29bdfa2f5e71f2a83d4c98120de4b9c711f\",\"license\":\"MIT\"},\"project/contracts/mocks/MockV3Aggregator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// mock\\u5408\\u7ea6\\uff0c\\n// FundMe\\u5408\\u7ea6\\u4e2d\\u7528\\u5230\\u4e86dataFeed\\u5408\\u7ea6\\uff0c\\u9700\\u8981\\u5728\\u6d4b\\u8bd5\\u7684\\u65f6\\u5019\\u5fc5\\u987b\\u5728sepolia\\u4e2d\\u8fdb\\u884c\\u3002\\n// MockV3Aggregator  mock\\u5408\\u7ea6\\u5b9e\\u73b0\\u4e86dataFeed\\u5408\\u7ea6\\u7684\\u57fa\\u672c\\u529f\\u80fd\\uff0c\\u53ea\\u9700\\u8981\\u5728\\u672c\\u5730\\u90e8\\u7f72\\u5c31\\u53ef\\u4ee5\\uff0c\\u4e0d\\u9700\\u8981\\u518dsepolia\\u4e2d\\u8fdb\\u884c\\u3002\\n// \\u8fd9\\u4e2amock\\u5408\\u7ea6\\u9700\\u8981\\u4e24\\u4e2a\\u53c2\\u6570\\n// decimals\\uff1amock\\u5408\\u7ea6\\u63d0\\u4f9b\\u7684\\u4ef7\\u683c\\u6570\\u636e\\uff0c\\u540e\\u9762\\u6709\\u51e0\\u4e2a0\\u3002\\u8bbe\\u4e3a8\\n// initialAnswer\\uff1a\\u8fd4\\u56de\\u4ef7\\u683c\\uff0c\\u771f\\u6b63\\u7684\\u9884\\u8a00\\u673a\\u5408\\u7ea6\\u5e94\\u8be5\\u662f\\u4ece\\u5916\\u90e8\\u83b7\\u53d6\\u7684\\uff0c\\u8fd9\\u4e2amock\\u5408\\u7ea6\\u662f\\u81ea\\u5df1\\u8bbe\\u5b9a\\u7684\\u3002300000000000\\uff083000\\u540e\\u97628\\u4e2a\\u96f6\\uff09\\npragma solidity ^0.8.20;\\n\\nimport {MockV3Aggregator} from \\\"@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol\\\";\\n\\ncontract MyMockV3Aggregator is MockV3Aggregator {\\n    constructor(\\n        uint8 _decimals,\\n        int256 _initialAnswer\\n    ) MockV3Aggregator(_decimals, _initialAnswer) {}\\n}\\n\",\"keccak256\":\"0x5aa45c98fabf2cb68c5f57b7202381fc248c0e638302dd2f66dda681f5a58b24\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 118,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 121,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 124,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 127,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 137,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 141,
        "contract": "project/contracts/mocks/MockV3Aggregator.sol:MyMockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "argsData": "0x000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000045d964b800",
  "transaction": {
    "hash": "0xe4b6e12094b5d26d6406de908a037a114b12b66b9d2adfe28bd4544584d63899",
    "nonce": "0x0",
    "origin": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
  },
  "receipt": {
    "blockHash": "0x57f5c944eaa78c72406b73ca204b4537ff4a46dad16d7eec0c9bf1f81e46227b",
    "blockNumber": "0x1",
    "transactionIndex": "0x0"
  }
}